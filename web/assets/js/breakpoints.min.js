/* breakpoints.js v1.0 | @ajlkn | MIT licensed */
const breakpoints = (() => {
    "use strict";
  
    const media = {};
    const events = [];
  
    const init = (list) => {
      window.addEventListener("resize", poll);
      window.addEventListener("orientationchange", poll);
      window.addEventListener("load", poll);
      window.addEventListener("fullscreenchange", poll);
      list && (media.list = list);
    };
  
    const active = (query) => {
      if (!(query in media)) {
        let operator, value, rangeStart, rangeEnd, unit, mediaQuery;
  
        if (query.startsWith(">=")) {
          operator = "gte";
          value = query.substring(2);
        } else if (query.startsWith("<=")) {
          operator = "lte";
          value = query.substring(2);
        } else if (query.startsWith(">")) {
          operator = "gt";
          value = query.substring(1);
        } else if (query.startsWith("<")) {
          operator = "lt";
          value = query.substring(1);
        } else if (query.startsWith("!")) {
          operator = "not";
          value = query.substring(1);
        } else {
          operator = "eq";
          value = query;
        }
  
        if (value && value in media.list) {
          rangeStart = parseInt(media.list[value][0]);
          rangeEnd = parseInt(media.list[value][1]);
  
          if (isNaN(rangeStart)) {
            if (isNaN(rangeEnd)) {
              return;
            }
            unit = media.list[value][1].substring(String(rangeEnd).length);
          } else {
            unit = media.list[value][0].substring(String(rangeStart).length);
          }
  
          if (isNaN(rangeStart)) {
            switch (operator) {
              case "gte":
                mediaQuery = "screen";
                break;
              case "lte":
                mediaQuery = `screen and (max-width: ${rangeEnd}${unit})`;
                break;
              case "gt":
                mediaQuery = `screen and (min-width: ${rangeEnd + 1}${unit})`;
                break;
              case "lt":
                mediaQuery = "screen and (max-width: -1px)";
                break;
              case "not":
                mediaQuery = `screen and (min-width: ${rangeEnd + 1}${unit})`;
                break;
              default:
                mediaQuery = `screen and (max-width: ${rangeEnd}${unit})`;
            }
          } else if (isNaN(rangeEnd)) {
            switch (operator) {
              case "gte":
                mediaQuery = `screen and (min-width: ${rangeStart}${unit})`;
                break;
              case "lte":
                mediaQuery = "screen";
                break;
              case "gt":
                mediaQuery = "screen and (max-width: -1px)";
                break;
              case "lt":
                mediaQuery = `screen and (max-width: ${rangeStart - 1}${unit})`;
                break;
              case "not":
                mediaQuery = `screen and (max-width: ${rangeStart - 1}${unit})`;
                break;
              default:
                mediaQuery = `screen and (min-width: ${rangeStart}${unit})`;
            }
          } else {
            switch (operator) {
              case "gte":
                mediaQuery = `screen and (min-width: ${rangeStart}${unit})`;
                break;
              case "lte":
                mediaQuery = `screen and (max-width: ${rangeEnd}${unit})`;
                break;
              case "gt":
                mediaQuery = `screen and (min-width: ${rangeEnd + 1}${unit})`;
                break;
              case "lt":
                mediaQuery = `screen and (max-width: ${rangeStart - 1}${unit})`;
                break;
              case "not":
                mediaQuery = `screen and (max-width: ${rangeStart - 1}${unit}), screen and (min-width: ${rangeEnd + 1}${unit})`;
                break;
              default:
                mediaQuery = `screen and (min-width: ${rangeStart}${unit}) and (max-width: ${rangeEnd}${unit})`;
            }
          }
        } else {
          mediaQuery = "(" === value.charAt(0) ? `screen and ${value}` : `screen and ${value}`;
        }
  
        media[query] = !!mediaQuery && mediaQuery;
      }
      return media[query] !== !1 && window.matchMedia(media[query]).matches;
    };
  
    const on = (query, handler) => {
      events.push({ query, handler, state: !1 });
      active(query) && handler();
    };
  
    const poll = () => {
      for (let i = 0; i < events.length; i++) {
        const event = events[i];
        active(event.query) ? event.state || (event.state = !0, event.handler()) : event.state && (event.state = !1);
      }
    };
  
    return { init, active, on };
  })();
  
  export default breakpoints;
  